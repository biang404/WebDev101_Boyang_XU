---
import BaseLayout from '../layouts/Layout.astro';
const pageTitle = "Exercices - WebDev101";
import '../styles/exercices.css';


const sections = [
{ id: "01_hello_world_ts", title: "01 hello world typescript" },
  { id: "02_hello_astro_typescript", title: "02 hello astro typescript" },
  { id: "03_modules", title: "03 modules" },
  { id: "04_client_server", title: "04 client or server side" },
  { id: "05_html_css_punto", title: "05 html css punto" },
  { id: "06_css_flexbox", title: "06 CSS flexbox" },
  { id: "07_fat_arrow", title: "07 fat arrow" },
  { id: "08_map_reduce", title: "08 map reduce filter" },
  { id: "09_objects", title: "09 objects" },
  { id: "10_json", title: "10 json" },
  { id: "11_generics", title: "11 generics" },
  { id: "12_exceptions", title: "12 exceptions" },
  { id: "13_async_await", title: "13 async await" },
  { id: "14_fetch", title: "14 fetch" },
  { id: "15_cors", title: "15 cors" },
  { id: "16_http_crud", title: "16 http CRUD" },
  { id: "17_forms", title: "17 forms" },
  { id: "18_web_components", title: "18 web components" },
];
---


<BaseLayout title={pageTitle}>
  <div class="exercise-layout">
    <aside class="sidebar">
      <h2>Exercices</h2>
      <ul>
        {sections.map(section => (
          <li>
            <a href={`#${section.id}`}>{section.title}</a>
          </li>
        ))}
      </ul>
    </aside>

    <main class="content">
      {sections.map(section => (
  <section id={section.id} class="exercise-section">
    <h3>{section.title}</h3>

    {section.id === "01_hello_world_ts" && (
      <article>
        <h4>üìù Question :</h4>
        <p>
          Comparez le fichier <code>hello.js</code> et <code>hello.ts</code> et d√©duisez l'√©tape de transpilation.
          √Ä quoi sert le typage fort dans TypeScript qui n'existe pas dans JavaScript ?
          R√©pondez dans un fichier texte au format markdown.
        </p>

        <h4>‚úÖ R√©ponse :</h4>
        <h5>La comparaison entre le fichier <code>hello.js</code> et <code>hello.ts</code></h5>
        <p>
          En TypeScript, nous devons sp√©cifier le type des variables (par exemple, dans <code>hello.ts</code>, le type de <code>message2</code> est <code>string</code>), alors qu'en JavaScript, ce n'est pas n√©cessaire.
          De plus, pour d√©finir une variable constante, les mots-cl√©s utilis√©s en TypeScript et en JavaScript sont √©galement diff√©rents.
        </p>

        <h5>L'√©tape de transpilation :</h5>
        <p>
          Le fichier <code>hello.ts</code> est √©crit en TypeScript, un langage qui ajoute des fonctionnalit√©s suppl√©mentaires √† JavaScript, notamment le typage statique.
          Lors de la transpilation (conversion du code TypeScript en JavaScript), le compilateur TypeScript (<code>tsc</code>) supprime les annotations de type et g√©n√®re un fichier JavaScript standard.
        </p>
        <p>Exemple :</p>
        <pre><code class="language-ts">const message2: string = "Hello World";</code></pre>
        <p>devient :</p>
        <pre><code class="language-js">var message1 = "Hello World";</code></pre>

        <h5>R√¥le du typage fort dans TypeScript :</h5>
        <ul>
          <li>‚úÖ D√©tection des erreurs de type avant ex√©cution.</li>
          <li>‚úÖ Meilleure lisibilit√© et compr√©hension du code.</li>
          <li>‚úÖ Autocompl√©tion plus pr√©cise dans les IDEs.</li>
          <li>‚úÖ Moins de bugs li√©s aux types, meilleur maintien du code.</li>
          <li>‚úÖ Support des concepts avanc√©s comme les interfaces, g√©n√©riques, SOLID.</li>
        </ul>

        <p><strong>En r√©sum√© :</strong> le typage fort dans TypeScript ajoute une couche de s√©curit√© et de clart√© qui n'existe pas dans JavaScript seul.</p>
      </article>
    )}

    {section.id === "02_hello_astro_typescript" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Cr√©ez une application web servie avec <strong>Astro</strong>, en <strong>TypeScript</strong>, qui affiche <code>"Bonjour, TypeScript!"</code> dans la page web :
    </p>
    <ul>
      <li>Cr√©er programmatiquement (depuis le script TypeScript) un <code>&lt;div&gt;</code> avec un id <code>"app"</code></li>
      <li>Cr√©er un <code>&lt;h1&gt;</code> avec le texte <code>"Bonjour, TypeScript!"</code></li>
      <li>Ajouter le <code>&lt;h1&gt;</code> dans le <code>&lt;div&gt;</code></li>
      <li>Ajouter le <code>&lt;div&gt;</code> dans le <code>&lt;body&gt;</code></li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <p>
      Pour accomplir cette t√¢che, suivez les instructions fournies dans le lien suivant :
      <a href="https://webdev101.gitlab.io/#/02_hello_astro_typescript/" target="_blank">webdev101.gitlab.io</a>,
      puis modifiez le fichier <code>src/pages/index.astro</code> comme suit :
    </p>

    <pre><code class="language-html">
---
---
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Astro + TypeScript&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script src="../scripts/app.ts"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
    </code></pre>

    <p>
      Ensuite, cr√©ez un dossier <code>src/scripts</code> et ajoutez un fichier nomm√© <code>app.ts</code> avec le code TypeScript suivant :
    </p>

    <pre><code class="language-ts">
// cr√©er programmatiquement (depuis le script TypeScript) un div avec un id "app"
const appDiv = document.createElement("div");
appDiv.id = "app";

// cr√©er un h1 avec le texte "Bonjour, TypeScript!"
const heading = document.createElement("h1");
heading.textContent = "Bonjour, TypeScript!";

// ajouter le h1 dans le div
appDiv.appendChild(heading);

// ajouter le div dans le body
document.body.appendChild(appDiv);
    </code></pre>

    <p>
      Ce script ajoutera dynamiquement une structure HTML dans la page une fois qu'elle est charg√©e, permettant √† l'utilisateur de voir le message ¬´ Bonjour, TypeScript! ¬ª g√©n√©r√© par TypeScript.
    </p>
  </article>
)}

    {section.id === "03_modules" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Cr√©ez une application avec trois fichiers : <code>calculJours.ts</code>, <code>moduleVacances.ts</code> et <code>moduleTravail.ts</code> qui utilisent des modules pour calculer le nombre de jours de vacances restants et le nombre de jours de travail restants pour un employ√©.
    </p>
    <ul>
      <li>
        Dans les deux modules <code>moduleVacances.ts</code> et <code>moduleTravail.ts</code>, cr√©ez la fonction <code>calculerJoursRestants</code> avec le m√™me nom dans les deux modules, qui prend en param√®tre le nombre de jours de vacances ou de travail d√©j√† pris et retourne le nombre de jours restants.
      </li>
      <li>
        Exportez la fonction avec <code>export</code> dans les deux modules.
      </li>
      <li>
        Dans le fichier <code>calculJours.ts</code>, importez les deux modules et utilisez la fonction <code>calculerJoursRestants</code> pour afficher le nombre de jours de vacances et de travail restants pour un employ√©. R√©solvez le conflit de nom entre les deux modules.
      </li>
      <li>
        Affichez les r√©sultats dans des balises <code>div</code> avec <code>createElement</code> et <code>appendChild</code>.
      </li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <p>
      Commencez par cr√©er un projet Astro comme expliqu√© dans les exercices pr√©c√©dents.
    </p>
    <p>
      Ensuite, remplacez le contenu du fichier <code>src/pages/index.astro</code> par :
    </p>

    <pre><code class="language-html">
---
---

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;WebDev101 Telecom Paris&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script src="../scripts/calculJours.ts"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
    </code></pre>

    <p>
      Ensuite, dans le dossier <code>src</code>, cr√©ez un sous-dossier <code>scripts</code>, puis ajoutez-y les trois fichiers suivants avec le contenu correspondant :
    </p>

    <p><strong>moduleVacances.ts</strong></p>
    <pre><code class="language-ts" is:raw>
export function calculerJoursRestants(joursPris: number): number {
  return 30 - joursPris;
}
    </code></pre>

    <p><strong>moduleTravail.ts</strong></p>
    <pre><code class="language-ts" is:raw>
export function calculerJoursRestants(joursPris: number): number {
  return 218 - joursPris;
}
    </code></pre>

    <p><strong>calculJours.ts</strong></p>
<pre><code class="language-ts">
import * as Vacances from "./moduleVacances.ts";
import * as Travail from "./moduleTravail.ts";

const joursVacancesRestants = Vacances.calculerJoursRestants(10);
const joursTravailRestants = Travail.calculerJoursRestants(30);

const div = document.createElement("div");
div.id = "resultats";

const vacancesEl = document.createElement("p");
vacancesEl.textContent = "Jours de vacances restants : " + joursVacancesRestants;

const travailEl = document.createElement("p");
travailEl.textContent = "Jours de travail restants : " + joursTravailRestants;

div.appendChild(vacancesEl);
div.appendChild(travailEl);
document.body.appendChild(div);
</code></pre>


    <p>
      Cette solution montre comment utiliser deux modules diff√©rents ayant une fonction portant le m√™me nom, et g√©rer le conflit gr√¢ce √† des alias d'importation (ici avec <code>* as</code>).
    </p>
  </article>
)}

{section.id === "04_client_server" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Regardez bien tous les fichiers source fournis dans le projet Astro.
      <code>index.astro</code> et <code>moduleWeatherServerSide.ts</code> sont dans le dossier <code>src/pages</code> et
      <code>app.ts</code> ainsi que <code>moduleWeatherClientSide.ts</code> sont dans le dossier <code>src/scripts</code>.
    </p>
    <p>
      Ajoutez des <code>console.log("message")</code> juste avant les <code>return</code> (en changeant "message" par ce que vous voulez)
      dans les fonctions <code>getCurrentHumidity</code>, <code>getCurrentWind</code>, <code>getCurrentTemperature</code> et <code>getCurrentCloudCover</code>.
    </p>
    <p>
      O√π s'affichent les 4 messages ? Dans le terminal du serveur Astro ou dans la console du navigateur ? Pourquoi ?
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <h5># Diff√©rence d'affichage des messages entre le serveur et le client</h5>

    <h6>## Observation</h6>
    <ul>
      <li>üñ•Ô∏è Les messages de <strong>Temperature</strong> et <strong>Cloud Cover</strong> se trouvent dans le <em>terminal du serveur Astro</em>.</li>
      <li>üåê Les messages de <strong>Humidity</strong> et <strong>Wind Speed</strong> se trouvent dans la <em>console du navigateur</em>.</li>
    </ul>

    <h6>## Explication</h6>

    <h6>### C√¥t√© serveur :</h6>
    <p>
      Les fonctions <code>getCurrentTemperature</code> et <code>getCurrentCloudCover</code> sont ex√©cut√©es lors du rendu c√¥t√© serveur, c‚Äôest-√†-dire avant que la page ne soit envoy√©e au navigateur.
    </p>
    <p>
      Astro ex√©cute ces fonctions sur le serveur (dans Node.js ou un environnement similaire) pour g√©n√©rer le HTML avec les donn√©es d√©j√† int√©gr√©es.
      Ainsi, les <code>console.log</code> situ√©s dans ces fonctions s‚Äôaffichent dans le terminal du serveur, et non dans le navigateur.
    </p>

    <h6>### C√¥t√© client :</h6>
    <p>
      Les fonctions <code>getCurrentHumidity</code> et <code>getCurrentWind</code> sont appel√©es dans du code ex√©cut√© <strong>apr√®s le chargement de la page</strong>, directement dans le navigateur via un script c√¥t√© client.
    </p>
    <p>
      Par cons√©quent, leurs <code>console.log</code> apparaissent dans la console des outils de d√©veloppement du navigateur, et non sur le serveur.
    </p>

    <p><strong>Conclusion :</strong> Cela illustre la diff√©rence entre le code ex√©cut√© <em>√† la construction de la page</em> (serveur) et le code ex√©cut√© <em>apr√®s le chargement de la page</em> (client).</p>
  </article>
)}

{section.id === "05_html_css_punto" && (
  <article>
    <p>Ceci est mon mini-projet. Veuillez cliquer sur le lien <strong>Punto</strong> dans la barre de navigation pour voir le r√©sultat.</p>
  </article>
)}

{section.id === "06_css_flexbox" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Faites les 4 exercices suivants. Pour le rendu du TP, cr√©ez un fichier HTML et un fichier CSS pour chaque exercice, et mettez les 4 exercices dans un dossier <code>06_CSS_flexbox</code> dans votre d√©p√¥t git. N'oubliez pas de lier vos fichiers HTML et CSS.
    </p>
    <ul>
      <li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout/Flexbox_skills#disposition_flexible_1" target="_blank">Disposition flexible 1</a></li>
      <li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout/Flexbox_skills#disposition_flexible_2" target="_blank">Disposition flexible 2</a></li>
      <li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout/Flexbox_skills#disposition_flexible_3" target="_blank">Disposition flexible 3</a></li>
      <li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout/Flexbox_skills#disposition_flexible_4" target="_blank">Disposition flexible 4</a></li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>

    <h5>üéØ Exercice 1 : Navigation horizontale</h5>
    <p>
      üëâ Le code HTML peut √™tre consult√© ici :  
      <a href="https://github.com/mdn/css-examples/blob/main/learn/tasks/flexbox/flexbox1-download.html" target="_blank">flexbox1-download.html</a>
    </p>
    <p><strong>task1.css</strong></p>
    <pre><code class="language-css" is:raw>{`nav ul {
  display: flex;
  justify-content: space-between;
  width: 100%;
  padding: 0;
}`}</code></pre>

    <h5>üéØ Exercice 2 : R√©partition horizontale de 3 blocs</h5>
    <p>
      üëâ Le code HTML peut √™tre consult√© ici :  
      <a href="https://github.com/mdn/css-examples/blob/main/learn/tasks/flexbox/flexbox2-download.html" target="_blank">flexbox2-download.html</a>
    </p>
    <p><strong>task2.css</strong></p>
    <pre><code class="language-css" is:raw>{`ul {
  display: flex;
  flex-direction: row;
  height: 100vh;
  padding: 0;
  margin: 0;
}

li {
  flex: 1;
  display: flex;
  justify-content: flex-start;
  margin: 0.5em 0;
}`}</code></pre>

    <h5>üéØ Exercice 3 : Centrage vertical et horizontal</h5>
    <p>
      üëâ Le code HTML peut √™tre consult√© ici :  
      <a href="https://github.com/mdn/css-examples/blob/main/learn/tasks/flexbox/flexbox3-download.html" target="_blank">flexbox3-download.html</a>
    </p>
    <p><strong>task3.css</strong></p>
    <pre><code class="language-css" is:raw>{`.parent {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: auto;
}

.child {
  width: 100px;
  height: 100px;
  background-color: lightblue;
}`}</code></pre>

    <h5>üéØ Exercice 4 : Grille responsive en 3 lignes</h5>
    <p>
      üëâ Le code HTML peut √™tre consult√© ici :  
      <a href="https://github.com/mdn/css-examples/blob/main/learn/tasks/flexbox/flexbox4-download.html" target="_blank">flexbox4-download.html</a>
    </p>
    <p><strong>task4.css</strong></p>
    <pre><code class="language-css" is:raw>{`ul {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-content: space-between;
  height: 100vh;
  list-style: none;
  padding: 0;
  margin: 0;
}

li {
  background-color: #4d7298;
  border: 2px solid #77a6b6;
  border-radius: 0.5em;
  color: #fff;
  padding: 0.5em;
  margin: 0.5em;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

li:nth-child(-n+4) {
  flex: 1 1 calc(25% - 1em);
  height: calc(33.33% - 1em);
}

li:nth-child(n+5):nth-child(-n+7),
li:nth-child(n+8) {
  flex: 1 1 calc(33.33% - 1em);
  height: calc(33.33% - 1em);
}`}</code></pre>

    <p>üìÅ Tous les fichiers CSS ci-dessus sont plac√©s dans le dossier <code>06_CSS_flexbox</code> conform√©ment √† l'instruction du TP.</p>
  </article>
)}


{section.id === "07_fat_arrow" && (
  <article>
    <h4>üìù Exercice 1 :</h4>
    <p>
      Faites un projet Astro et faites en sorte que le fichier <code>app.ts</code> soit ex√©cut√© dans le navigateur (c√¥t√© client). Cela permet d'acc√©der √† l'objet <code>document</code> qui repr√©sente la page web affich√©e dans le navigateur.
    </p>
    <p>
      Ajoutez un <code>addEventListener</code> sur le <code>document</code> pour afficher les coordonn√©es du clic de la souris.
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <p>
      Veuillez d'abord cr√©er un projet Astro comme dans les exercices pr√©c√©dents, puis remplacez le fichier <code>src/pages/index.astro</code> avec le code minimal qui appelle un fichier <code>app.ts</code> situ√© dans le dossier <code>src/scripts</code>.
    </p>
    <p>Le contenu du fichier <code>app.ts</code> est le suivant :</p>
    <pre><code class="language-ts" is:raw>{`document.addEventListener("click", (event: MouseEvent) => {
  console.log(\`x: \${event.clientX}, y: \${event.clientY}\`);
});`}</code></pre>

    <hr />

    <h4>üìù Exercice 2 :</h4>
    <p>
      Faites une application de calculatrice :
    </p>
    <ul>
      <li>Cr√©ez une fonction fl√©ch√©e <code>additionner</code> qui prend deux nombres et retourne leur somme.</li>
      <li>Cr√©ez une fonction fl√©ch√©e <code>soustraire</code> qui retourne la diff√©rence.</li>
      <li>Cr√©ez une fonction fl√©ch√©e <code>multiplier</code> qui retourne le produit.</li>
      <li>Cr√©ez une fonction fl√©ch√©e <code>diviser</code> qui retourne le quotient.</li>
      <li>
        Cr√©ez une fonction fl√©ch√©e <code>calculatrice</code> qui prend deux nombres et une cha√Æne repr√©sentant l‚Äôop√©ration, puis affiche le r√©sultat de l‚Äôop√©ration.
      </li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <p>Voici le contenu du fichier <code>app.ts</code> correspondant √† cette calculatrice :</p>
    <pre><code class="language-ts" is:raw>{`const additionner = (a: number, b: number): number => a + b;
const soustraire = (a: number, b: number): number => a - b;
const multiplier = (a: number, b: number): number => a * b;
const diviser = (a: number, b: number): number => a / b;

const calculatrice = (a: number, b: number, operation: string): void => {
  let resultat: number;

  switch (operation) {
    case "additionner":
      resultat = additionner(a, b);
      break;
    case "soustraire":
      resultat = soustraire(a, b);
      break;
    case "multiplier":
      resultat = multiplier(a, b);
      break;
    case "diviser":
      resultat = diviser(a, b);
      break;
    default:
      console.log("Op√©ration non reconnue.");
      return;
  }

  console.log(\`\${operation}(\${a}, \${b}) = \${resultat}\`);
};

// Exemple d'appel :
calculatrice(10, 5, "additionner");
calculatrice(10, 5, "soustraire");
calculatrice(10, 5, "multiplier");
calculatrice(10, 5, "diviser");`}</code></pre>

    <hr />

    <h4>üìù Exercice 3 :</h4>
    <p>
      Faites une application qui affiche les coordonn√©es de la souris toutes les secondes.
      Vous pouvez vous aider de la documentation de l'objet <code>MouseEvent</code> :
      <a href="https://developer.mozilla.org/fr/docs/Web/API/MouseEvent" target="_blank">MDN MouseEvent</a>
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <p>Voici le contenu du fichier <code>app.ts</code> :</p>
    <pre><code class="language-ts" is:raw>{`let mouseX: number = 0;
let mouseY: number = 0;

document.addEventListener("mousemove", (event: MouseEvent) => {
  mouseX = event.clientX;
  mouseY = event.clientY;
});

setInterval(() => {
  console.log(\`x: \${mouseX}, y: \${mouseY}\`);
}, 1000);`}</code></pre>
  </article>
)}

{section.id === "08_map_reduce" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Cr√©ez un tableau de cha√Ænes de caract√®res qui repr√©sentent des noms de fruits (le tableau initial) :
      <code>"pomme", "kiwi", "banane", "cerise", "orange", "poire", "fraise", "prune", "ananas", "p√™che"</code>
    </p>
    <ul>
      <li>Utilisez <code>map</code> et une fonction fl√©ch√©e pour cr√©er un nouveau tableau o√π chaque fruit est √©crit en majuscules.</li>
      <li>Utilisez <code>filter</code> et une fonction fl√©ch√©e pour cr√©er un nouveau tableau qui ne contient que les fruits qui commencent par la lettre <code>'p'</code>.</li>
      <li>Utilisez <code>reduce</code> et une fonction fl√©ch√©e pour obtenir une seule cha√Æne qui contient tous les noms de fruits s√©par√©s par des virgules.</li>
      <li>Utilisez <code>find</code> et une fonction fl√©ch√©e pour trouver le premier fruit qui a plus de 5 lettres.</li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <p>Voici un exemple de code TypeScript qui r√©pond √† toutes les consignes ci-dessus :</p>

    <pre><code class="language-ts" is:raw>{`let tab: string[] = ["pomme", "kiwi", "banane", "cerise", "orange", "poire", "fraise", "prune", "ananas", "p√™che"];
console.log("tab: " + tab);

// utilisation de map
function toUpperCase(str: string): string {
  return str.toUpperCase();
}
let tab_majuscule: string[] = tab.map(toUpperCase);
console.log("tab.map(toUpperCase): " + tab_majuscule);

// utilisation de filter
function filter_p(str: string): boolean {
  return str.startsWith("p");
}
let tab_filtrage: string[] = tab.filter(filter_p);
console.log("tab.filter(filter_p): " + tab_filtrage);

// utilisation de reduce
let chaine = (a: string, b: string) => a + "," + b;
let tab_reduce = tab.reduce(chaine);
console.log("tab.reduce(chaine): " + tab_reduce);

// utilisation de find
function plusGrandQue5(str: string): boolean {
  return str.length > 5;
}
let tab_plusGrandQue5_valeur = tab.find(plusGrandQue5);
let tab_plusGrandQue5_index = tab.findIndex(plusGrandQue5);
console.log(
  \`\${tab_plusGrandQue5_valeur} est le premier √©l√©ment sup√©rieur √† 5 et il est situ√© √† la position \${tab_plusGrandQue5_index}\`
);`}</code></pre>

    <p>
      Ce code utilise les quatre m√©thodes fonctionnelles de manipulation de tableaux en JavaScript (<code>map</code>, <code>filter</code>, <code>reduce</code>, <code>find</code>) avec des fonctions fl√©ch√©es ou des fonctions classiques selon les besoins p√©dagogiques.
    </p>
  </article>
)}


{section.id === "09_objects" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Cr√©ez une interface <code>IVehicle</code> qui d√©finit une m√©thode <code>drive</code> qui renvoie <code>void</code> et une m√©thode <code>honk</code> qui renvoie <code>void</code>.
    </p>
    <p>
      Cr√©ez une classe abstraite <code>Vehicle</code> qui impl√©mente <code>IVehicle</code> et qui a une propri√©t√© <code>speed</code>, une m√©thode abstraite <code>honk</code> (qui renvoie <code>void</code>), et une m√©thode <code>drive</code> qui affiche <code>"Driving at " + this.speed + " km/h"</code> dans la console.
    </p>
    <p>
      Cr√©ez une classe <code>Car</code> qui h√©rite de <code>Vehicle</code> et impl√©mente <code>honk</code> avec l'affichage <code>"Beep beep!"</code>.
    </p>
    <p>
      Cr√©ez une classe <code>Bicycle</code> qui h√©rite de <code>Vehicle</code> et impl√©mente <code>honk</code> avec l'affichage <code>"Ring Ring"</code>.
    </p>
    <p>
      Cr√©ez deux instances de <code>Car</code> et trois de <code>Bicycle</code>, puis ajoutez-les √† un tableau <code>vehicles</code> de type <code>IVehicle[]</code>.
    </p>
    <p>
      Parcourez le tableau <code>vehicles</code> avec une boucle <code>for...of</code> et appelez les m√©thodes <code>drive</code> et <code>honk</code> √† chaque it√©ration.
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <pre><code class="language-ts" is:raw>{`interface IVehicle {
  drive(): void;
  honk(): void;
}

abstract class Vehicle implements IVehicle {
  speed: number;

  constructor(speed: number) {
    this.speed = speed;
  }

  abstract honk(): void;

  drive(): void {
    console.log(\`Driving at \${this.speed} km/h\`);
  }
}

class Car extends Vehicle {
  honk(): void {
    console.log("Beep beep!");
  }
}

class Bicycle extends Vehicle {
  honk(): void {
    console.log("Ring Ring");
  }
}

// Cr√©er des instances de Car et Bicycle
const car1 = new Car(100);
const car2 = new Car(120);
const bicycle1 = new Bicycle(20);
const bicycle2 = new Bicycle(25);
const bicycle3 = new Bicycle(30);

// Ajouter les instances dans un tableau
const vehicles: IVehicle[] = [car1, car2, bicycle1, bicycle2, bicycle3];

for (const vehicle of vehicles) {
  vehicle.drive();
  vehicle.honk();
}`}</code></pre>

    <p>
      Cette activit√© permet de comprendre l'utilisation des interfaces, classes abstraites, h√©ritage, et polymorphisme en TypeScript avec une syntaxe orient√©e objet.
    </p>
  </article>
)}

{section.id === "10_json" && (
  <article>
    <h4>üìù Question :</h4>
    <ul>
      <li>Cr√©ez une interface <code>IUser</code> qui repr√©sente un utilisateur avec les propri√©t√©s <code>id</code>, <code>name</code>, <code>age</code>, et un tableau <code>scores</code> (nombres entiers), ainsi que deux m√©thodes : <code>getMaxScore</code> et <code>getAverageScore</code>.</li>
      <li>Cr√©ez une classe <code>User</code> qui impl√©mente <code>IUser</code>.</li>
      <li>Cr√©ez trois instances de <code>User</code>.</li>
      <li>Cr√©ez un tableau de type <code>IUser[]</code> contenant ces trois instances.</li>
      <li>Cr√©ez une fonction <code>serializeUsers</code> qui s√©rialise un tableau de <code>IUser</code> en JSON et affichez le r√©sultat.</li>
      <li>Cr√©ez une fonction <code>deserializeUsers</code> qui prend une cha√Æne JSON et retourne un tableau de <code>IUser</code>. Appelez cette fonction et affichez le r√©sultat.</li>
      <li>Expliquez pourquoi on ne peut pas appeler <code>getMaxScore</code> et <code>getAverageScore</code> sur les objets d√©s√©rialis√©s sans conversion.</li>
      <li>Trouvez une solution pour restaurer le comportement des m√©thodes, en cr√©ant de nouvelles instances de <code>User</code> avec les donn√©es d√©s√©rialis√©es.</li>
      <li>Affichez le nom, le score maximum et la moyenne du deuxi√®me utilisateur du tableau d√©s√©rialis√©.</li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <pre><code class="language-ts" is:raw>{`interface IUser {
  id: string;
  name: string;
  age: number;
  scores: number[];
  getMaxScore(): number;
  getAverageScore(): number;
}

class User implements IUser {
  id: string;
  name: string;
  age: number;
  scores: number[];

  constructor(id: string, name: string, age: number, scores: number[]) {
    this.id = id;
    this.name = name;
    this.age = age;
    this.scores = scores;
  }

  getMaxScore(): number {
    return Math.max(...this.scores);
  }

  getAverageScore(): number {
    const total = this.scores.reduce((acc, score) => acc + score, 0);
    return total / this.scores.length;
  }
}

// Cr√©ation des instances
const User1 = new User("123", "John", 25, [20, 30, 40]);
const User2 = new User("456", "Eya", 23, [2.4, 34]);
const User3 = new User("789", "Emma", 32, [23.1, 9, 5]);

const users: IUser[] = [User1, User2, User3];

// S√©rialisation
function serializeUsers(users: IUser[]): string {
  return JSON.stringify(users);
}

// D√©s√©rialisation avec restauration de m√©thodes
function deserializeUsers(json: string): IUser[] {
  const parsed = JSON.parse(json);
  return parsed.map((user: any) => new User(user.id, user.name, user.age, user.scores));
}

// S√©rialiser
const serializedUsers = serializeUsers(users);
console.log("Serialized Users:", serializedUsers);

// D√©s√©rialiser
const deserializedUsers = deserializeUsers(serializedUsers);
console.log("Deserialized Users:", deserializedUsers);

// Utiliser les m√©thodes restaur√©es
deserializedUsers.forEach(user => {
  console.log(\`User: \${user.name}, Max Score: \${user.getMaxScore()}, Average Score: \${user.getAverageScore()}\`);
});

// Affichage du 2e utilisateur
const secondUser = deserializedUsers[1];
console.log(\`Second User: \${secondUser.name}, Max Score: \${secondUser.getMaxScore()}, Average Score: \${secondUser.getAverageScore()}\`);`}</code></pre>

    <p>
      üîé <strong>Remarque :</strong> apr√®s une d√©s√©rialisation avec <code>JSON.parse</code>, les objets obtenus ne sont plus des instances de la classe <code>User</code>, mais des objets simples sans m√©thodes. Il faut donc les retransformer en vraies instances avec <code>new User(...)</code> pour pouvoir appeler <code>getMaxScore</code> et <code>getAverageScore</code>.
    </p>
  </article>
)}


{section.id === "11_generics" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Cr√©ez une classe <code>Queue</code> qui utilise les <strong>g√©n√©riques</strong>. Cette classe doit avoir les m√©thodes suivantes :
    </p>
    <ul>
      <li><code>enqueue(element: T)</code> : ajoute un √©l√©ment √† la queue.</li>
      <li><code>dequeue()</code> : supprime et renvoie l'√©l√©ment en t√™te de la queue. Si la queue est vide, cette m√©thode doit renvoyer <code>undefined</code>.</li>
      <li><code>size()</code> : renvoie le nombre d'√©l√©ments dans la queue.</li>
    </ul>
    <p>
      Cr√©ez une instance de <code>Queue</code> qui stocke des <strong>nombres</strong> et une autre qui stocke des <strong>cha√Ænes de caract√®res</strong>. Testez les m√©thodes <code>enqueue</code>, <code>dequeue</code> et <code>size</code> sur ces instances.
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <pre><code class="language-ts" is:raw>{`class Queue<T> {
  private queue: T[] = [];

  enqueue(element: T): void {
    this.queue.push(element);
    console.log(\`Have push \${element} into the queue\`);
  }

  dequeue(): T | undefined {
    const dequeuedElement = this.queue.shift();
    console.log(\`Have pull \${dequeuedElement} out of the queue\`);
    return dequeuedElement;
  }

  size(): number {
    const size = this.queue.length;
    console.log(\`The size of the queue: \${size}\`);
    return size;
  }
}

// ====== Test avec des nombres ======
let numberQueue = new Queue<number>();
numberQueue.enqueue(1);
numberQueue.enqueue(2);
numberQueue.size();       // 2
numberQueue.dequeue();    // 1
numberQueue.dequeue();    // 2
numberQueue.size();       // 0
numberQueue.dequeue();    // undefined

// ====== Test avec des cha√Ænes de caract√®res ======
let stringQueue = new Queue<string>();
stringQueue.enqueue("Hello");
stringQueue.enqueue("World");
stringQueue.size();       // 2
stringQueue.dequeue();    // "Hello"
stringQueue.dequeue();    // "World"
stringQueue.size();       // 0
stringQueue.dequeue();    // undefined`}</code></pre>

    <p>
      Ce code montre comment utiliser des <strong>types g√©n√©riques</strong> en TypeScript pour cr√©er une structure de donn√©es r√©utilisable et typ√©e. La m√™me classe <code>Queue</code> peut √™tre utilis√©e pour n'importe quel type : nombres, cha√Ænes, objets, etc.
    </p>
  </article>
)}

{section.id === "12_exceptions" && (
  <article>
    <h4>üìù Question :</h4>
    <ul>
      <li>Cr√©er la classe <code>Rectangle</code> avec les propri√©t√©s <code>longueur</code> et <code>largeur</code>, et un constructeur qui initialise ces propri√©t√©s.</li>
      <li>Ajouter une m√©thode <code>calculerSurface</code> qui calcule la surface. Elle doit utiliser <code>throw</code> pour g√©rer les cas o√π les dimensions sont n√©gatives, nulles ou non num√©riques.</li>
      <li>Ajouter une m√©thode <code>essayerCalculerSurface</code> qui utilise un bloc <code>try-catch-finally</code> pour appeler <code>calculerSurface</code> et g√©rer les erreurs potentielles.</li>
      <li>Cr√©er plusieurs instances de <code>Rectangle</code> pour tester le bon fonctionnement de la gestion des exceptions.</li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <pre><code class="language-ts" is:raw>{`class Rectangle {
  largeur: number;
  longueur: number;

  constructor(largeur: number, longueur: number) {
    this.largeur = largeur;
    this.longueur = longueur;
  }

  calculerSurface(): number {
    if (this.largeur <= 0 || this.longueur <= 0) {
      throw new Error("La largeur et la longueur doivent √™tre sup√©rieures √† 0");
    }
    if (isNaN(this.largeur) || isNaN(this.longueur)) {
      throw new Error("La largeur et la longueur doivent √™tre des nombres");
    }
    return this.largeur * this.longueur;
  }

  essayerCalculerSurface() {
    try {
      console.log(\`Surface: \${this.calculerSurface()}\`);
    } catch (e: any) {
      console.error(e.message);
    } finally {
      console.log("Fin de la tentative de calcul de la surface.");
    }
  }
}

// Cas de test
const rectangle1 = new Rectangle(5, 10);
rectangle1.essayerCalculerSurface(); // ‚úÖ Surface: 50

const rectangle2 = new Rectangle(-5, 10);
rectangle2.essayerCalculerSurface(); // ‚ùå Erreur : dimensions n√©gatives

const rectangle3 = new Rectangle(5, -10);
rectangle3.essayerCalculerSurface(); // ‚ùå Erreur : dimensions n√©gatives

const rectangle4 = new Rectangle(5, NaN);
rectangle4.essayerCalculerSurface(); // ‚ùå Erreur : dimensions non valides`}</code></pre>

    <p>
      Ce code montre comment utiliser les <strong>exceptions</strong> pour g√©rer les erreurs li√©es aux donn√©es invalides dans une classe TypeScript, et comment utiliser les blocs <code>try-catch-finally</code> pour s√©curiser l'ex√©cution.
    </p>
  </article>
)}


{section.id === "13_async_await" && (
  <article>
    <h4>üìù Exercice 1 :</h4>
    <p>
      Cr√©ez une fonction <code>calculateSumAsync</code> qui prend deux nombres comme arguments et retourne une promesse qui se r√©sout √† leur somme apr√®s 3 secondes.
    </p>
    <p>
      Utilisez <code>async</code> et <code>await</code> dans une fonction <code>printSum</code> pour appeler <code>calculateSumAsync</code>. Cette fonction doit afficher "Calcul en cours..." puis le r√©sultat une fois disponible.
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <pre><code class="language-ts" is:raw>{`function calculateSumAsync(a: number, b: number): Promise<number> {
  return new Promise<number>((resolve) => {
    setTimeout(() => {
      resolve(a + b);
    }, 3000);
  });
}

async function printSum(a: number, b: number): Promise<void> {
  console.log("Calcul en cours...");
  const sum = await calculateSumAsync(a, b);
  console.log(\`La somme est : \${sum}\`);
}

// Test
printSum(5, 10);`}</code></pre>

    <hr />

    <h4>üìù Exercice 2 :</h4>
    <p>
      Cr√©ez une fonction <code>verifyUser</code> qui prend un nom d'utilisateur et un mot de passe. Elle retourne une promesse r√©solue si les identifiants sont corrects, ou rejet√©e sinon.
    </p>
    <p>
      Utilisez <code>then</code> et <code>catch</code> pour g√©rer la promesse : afficher un message de bienvenue ou une erreur.
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <pre><code class="language-ts" is:raw>{`function verifyUser(User: string, password: string): Promise<string> {
  return new Promise<string>((resolve, reject) => {
    const success = (User === password);
    setTimeout(() => {
      if (success) {
        resolve("Bienvenue!");
      } else {
        reject(new Error("Erreur: Utilisateur ou mot de passe incorrect"));
      }
    }, 2000);
  });
}

// Utilisation
verifyUser("mobsf", "mobsf")
  .then((retour) => console.log(retour))
  .catch((error) => console.error(error.message));

verifyUser("mobsf", "mobsf1")
  .then((retour) => console.log(retour))
  .catch((error) => console.error(error.message));`}</code></pre>

    <hr />

    <h4>üìù Exercice 3 :</h4>
    <p>
      Reprenez les exercices pr√©c√©dents mais cette fois-ci en utilisant des classes :
    </p>
    <ul>
      <li><code>Calculator</code> pour encapsuler <code>calculateSumAsync</code></li>
      <li><code>User</code> pour encapsuler <code>verifyUser</code></li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <pre><code class="language-ts" is:raw>{`class Calculator {
  calculateSumAsync(a: number, b: number): Promise<number> {
    return new Promise<number>((resolve) => {
      setTimeout(() => {
        resolve(a + b);
      }, 3000);
    });
  }
}

async function printsum(a: number, b: number): Promise<void> {
  console.log("Calcul en cours...");
  const calculator = new Calculator();
  const sum = await calculator.calculateSumAsync(a, b);
  console.log(\`La somme est : \${sum}\`);
}

// Test
printsum(5, 10);

class User_tp13 {
  private username: string;
  private password: string;

  constructor(username: string, password: string) {
    this.username = username;
    this.password = password;
  }

  verifyUser(inputUsername: string, inputPassword: string): Promise<string> {
    return new Promise<string>((resolve, reject) => {
      const success = (this.username === inputUsername && this.password === inputPassword);
      setTimeout(() => {
        if (success) {
          resolve(\`Bienvenue, \${this.username}!\`);
        } else {
          reject(new Error("Erreur: Utilisateur ou mot de passe incorrect"));
        }
      }, 2000);
    });
  }
}

// Test de la classe User
const user = new User_tp13("mobsf", "password123");

user.verifyUser("mobsf", "password123")
  .then((message) => console.log(message))
  .catch((error) => console.error(error.message));

user.verifyUser("mobsf", "wrongpassword")
  .then((message) => console.log(message))
  .catch((error) => console.error(error.message));`}</code></pre>

    <p>
      Ces exercices d√©montrent l'utilisation des <strong>promesses</strong>, de <strong>async/await</strong> et de la <strong>programmation orient√©e objet</strong> avec TypeScript.
    </p>
  </article>
)}


{section.id === "14_fetch" && (
  <article>
    <h4>üìù Exercice 1 :</h4>
    <p>
      Afficher les propri√©t√©s de chaque tremblement de terre dans le navigateur. Faites en sorte que le script s'ex√©cute c√¥t√© client et soit servi avec un serveur Astro.
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <p>
      Comme pour les exercices pr√©c√©dents, cr√©ez un projet Astro et modifiez le fichier <code>src/pages/index.astro</code> pour inclure un fichier TypeScript c√¥t√© client depuis <code>src/scripts</code>.
    </p>
    <p>Le fichier TypeScript contient le code suivant :</p>

    <pre><code class="language-ts" is:raw>{`interface Earthquake {
  properties: {
    time: number;
    place: string;
    mag: number;
  };
}

class EarthquakeService {
  private async getEarthquakesFromUSGS(): Promise<Earthquake[]> {
    const response = await fetch(
      "https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=yesterday&endtime=today&minmagnitude=4"
    );
    const earthquakejson = await response.json();
    return earthquakejson.features;
  }

  async displayEarthquakes() {
    try {
      const earthquakes = await this.getEarthquakesFromUSGS();
      const ul = document.createElement("ul");

      earthquakes.forEach((earthquake) => {
        const date = new Date(earthquake.properties.time);
        const options = {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
          timeZone: "Europe/Paris",
        };
        const dateString = date.toLocaleDateString("fr-FR", options);
        const finalString = dateString + " - " + earthquake.properties.mag + " - " + earthquake.properties.place;
        console.log(finalString);

        const li = document.createElement("li");
        li.textContent = finalString;
        ul.appendChild(li);
      });

      document.body.appendChild(ul);
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des tremblements de terre :", error);
    }
  }
}

const earthquakeService = new EarthquakeService();
earthquakeService.displayEarthquakes();`}</code></pre>

    <hr />

    <h4>üìù Exercice 2 :</h4>
    <p>
      Cr√©ez une interface <code>Address</code> pour repr√©senter les r√©sultats de recherche d'adresse, en extrayant les champs depuis <code>properties</code> dans les objets de type Feature.
    </p>
    <p>
      Cr√©ez une classe <code>AddressService</code> avec une m√©thode <code>searchAddress(query, limit)</code> qui effectue une requ√™te <code>GET</code> √† l'API <a href="https://api-adresse.data.gouv.fr/search/" target="_blank">api-adresse.data.gouv.fr</a> et retourne les r√©sultats.
    </p>
    <p>
      Affichez ensuite les r√©sultats dans la console et sur la page web, en formatant les propri√©t√©s souhait√©es. G√©rez aussi les erreurs de mani√®re appropri√©e.
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <pre><code class="language-ts" is:raw>{`interface Address {
  properties: {
    city: string;
    postcode: number;
    street: string;
    houseNumber: number;
    context: string;
    lat: number;
    lon: number;
  };
}

class AddressService {
  async searchAddress(query: string, limit: number): Promise<any> {
    try {
      const encodedQuery = encodeURIComponent(query);
      const url = \`https://api-adresse.data.gouv.fr/search/?q=\${encodedQuery}&limit=\${limit}\`;
      const response = await fetch(url);

      if (!response.ok) {
        throw new Error("Erreur lors de la requ√™te : " + response.statusText);
      }

      const data = await response.json();
      return data.features;
    } catch (error) {
      console.error("Une erreur est survenue lors de la recherche d'adresse :", error);
      throw error;
    }
  }

  displayResults(results: any[]): void {
    console.log("R√©sultats de la recherche :", results);

    const resultContainer = document.getElementById("results") || document.createElement("ul");
    resultContainer.id = "results";
    resultContainer.innerHTML = "";

    results.forEach((result) => {
      const {
        city = "N/A",
        postcode = "N/A",
        street = "N/A",
        housenumber = "N/A",
        context = "N/A"
      } = result.properties;

      const [lon = "N/A", lat = "N/A"] = result.geometry.coordinates;

      const listItem = document.createElement("li");
      listItem.textContent = \`City: \${city}, Postcode: \${postcode}, Street: \${street}, House Number: \${housenumber}, Context: \${context}, Latitude: \${lat}, Longitude: \${lon}\`;
      resultContainer.appendChild(listItem);
    });

    if (!document.body.contains(resultContainer)) {
      document.body.appendChild(resultContainer);
    }
  }
}

const addressService = new AddressService();
addressService.searchAddress("8 bd du port", 5)
  .then((results) => {
    addressService.displayResults(results);
  })
  .catch((error) => {
    console.error("Erreur :", error.message);
  });`}</code></pre>

    <p>
      Ces deux exercices vous permettent de pratiquer l'utilisation de <strong>fetch</strong> pour des appels API r√©els, le traitement JSON, et l'affichage dynamique des donn√©es sur une page web c√¥t√© client avec TypeScript.
    </p>
  </article>
)}


{section.id === "15_cors" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Faites une application qui s'ex√©cute c√¥t√© <strong>serveur</strong> (pour ne pas √™tre bloqu√© par CORS) et qui affiche une liste des titres de la playlist 
      <a href="https://api.deezer.com/playlist/11846226041" target="_blank">Top 100 France 2023</a>.
    </p>
    <p>
      L'affichage doit √™tre une liste <code>&lt;ul&gt;</code> dont chaque √©l√©ment <code>&lt;li&gt;</code> contient :
    </p>
    <ul>
      <li>Un index (√† partir de <code>1</code>)</li>
      <li>Le <strong>titre de la chanson</strong></li>
      <li>Le <strong>nom de l'artiste</strong></li>
      <li>Le <strong>titre de l'album</strong></li>
      <li>La <strong>miniature</strong> de l'album via <code>cover_small</code></li>
      <li>Un lecteur <code>&lt;audio&gt;</code> avec <code>controls</code> et <code>preload="none"</code></li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <p>
      Commencez par cr√©er un projet Astro, puis modifiez le fichier <code>src/pages/index.astro</code> pour tester l‚ÄôAPI Deezer :
    </p>

    <pre><code>{`<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Test Deezer API</title>
</head>
<body>
  <h1>Test Deezer API</h1>
  <script>
    fetch("https://api.deezer.com/playlist/11846226041")
      .then(response => response.json())
      .then(data => console.log(data))
      .catch(error => console.error("CORS Error:", error));
  </script>
</body>
</html>`}</code></pre>

    <p>Ensuite, cr√©ez le fichier <code>src/scripts/app.ts</code> c√¥t√© serveur :</p>

    <pre><code>{`import express from "express";

const app = express();
const PORT = 3000;

interface DeezerPlaylist {
  tracks: {
    data: Datum[];
  };
}

interface Datum {
  title: string;
  artist: {
    name: string;
  };
  album: {
    title: string;
    cover_small: string;
  };
  preview: string;
}

app.get("/", async (req, res) => {
  try {
    const response = await fetch("https://api.deezer.com/playlist/11846226041");
    const data: DeezerPlaylist = await response.json();

    let html = \`
      <!DOCTYPE html>
      <html lang="fr">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Top 100 France 2023</title>
      </head>
      <body>
        <h1>Top 100 France 2023</h1>
        <ul>
    \`;

    data.tracks.data.forEach((track, index) => {
      html += \`
        <li>
          <h3>\${index + 1}. \${track.title}</h3>
          <p>\${track.artist.name}</p>
          <p>\${track.album.title}</p>
          <img src="\${track.album.cover_small}" alt="cover">
          <audio controls preload="none">
            <source src="\${track.preview}" type="audio/mpeg">
            Votre navigateur ne supporte pas l'audio.
          </audio>
        </li>
      \`;
    });

    html += \`
        </ul>
      </body>
      </html>
    \`;

    res.send(html);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des donn√©es :", error);
    res.status(500).send("Erreur serveur.");
  }
});

app.listen(PORT, () => {
  console.log(\`Serveur d√©marr√© sur http://localhost:\${PORT}\`);
});`}</code></pre>

    <p>
      ‚úÖ Ce script Express contourne les erreurs CORS en appelant l‚ÄôAPI c√¥t√© serveur. Il g√©n√®re une page HTML avec tous les morceaux de la playlist.
    </p>
  </article>
)}



{section.id === "16_http_crud" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Modifiez le fichier <code>app.ts</code> pour bien g√©rer les <strong>modifications des relations</strong> entre les restaurants et les cat√©gories :
    </p>
    <ul>
      <li>‚úîÔ∏è √Ä chaque suppression/modification d'une <strong>cat√©gorie</strong>, mettez √† jour les <code>categoryIds</code> de tous les restaurants qui la contiennent.</li>
      <li>‚úîÔ∏è √Ä chaque suppression/modification d'un <strong>restaurant</strong>, mettez √† jour les <code>restaurantIds</code> de toutes les cat√©gories qui le contiennent.</li>
      <li>‚úîÔ∏è Dans les deux cas, modifiez aussi les relations dans <code>restaurantCategories</code>.</li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <p>Voici un extrait de code TypeScript repr√©sentatif de la solution compl√®te :</p>

    <pre><code class="language-ts" is:raw>{`interface AlloResto {
  restaurants: Restaurant[];
  categories: Category[];
  restaurantCategories: RestaurantCategory[];
}

interface Category {
  id?: string;
  name?: string;
  restaurantIds?: string[];
}

interface RestaurantCategory {
  restaurantId?: string;
  categoryId?: string;
}

interface Restaurant {
  id?: string;
  name?: string;
  description?: string;
  categoryIds?: string[];
}

// D√©finition de clients g√©n√©riques HTTP (CRUD)
abstract class HttpClient<T> {
  protected url: string;
  protected options: RequestInit;

  constructor(url: string) {
    this.url = url;
    this.options = {
      headers: {
        "Content-Type": "application/json",
      },
    };
  }

  public async execute(): Promise<T | void> {
    try {
      const response = await fetch(this.url, this.options);
      if (response.ok) {
        const data: T = await response.json();
        return data;
      }
    } catch (error) {
      console.error("Fetch error: ", error);
    }
  }
}

class CreateClient<T> extends HttpClient<T> {
  constructor(url: string, data: T) {
    super(url);
    this.options.method = "POST";
    this.options.body = JSON.stringify(data);
  }
}

class ReadClient<T> extends HttpClient<T> {
  constructor(url: string) {
    super(url);
    this.options.method = "GET";
  }
}

class UpdateClient<T> extends HttpClient<T> {
  constructor(url: string, data: T) {
    super(url);
    this.options.method = "PATCH";
    this.options.body = JSON.stringify(data);
  }
}

class DeleteClient<T> extends HttpClient<T> {
  constructor(url: string) {
    super(url);
    this.options.method = "DELETE";
  }
}

// Exemple : suppression d'une cat√©gorie
const deleteCategoryClient = new DeleteClient<Category>("http://localhost:3000/categories/71b2");
deleteCategoryClient.execute().then((category) => {
  if (category) {
    console.log("DELETE Category :", category);

    const readRestaurants = new ReadClient<Restaurant[]>("http://localhost:3000/restaurants");
    readRestaurants.execute().then((restaurants) => {
      if (restaurants) {
        restaurants.forEach((r) => {
          if (r.categoryIds?.includes(category.id!)) {
            const updated = r.categoryIds.filter((id) => id !== category.id);
            new UpdateClient<Restaurant>(\`http://localhost:3000/restaurants/\${r.id}\`, {
              categoryIds: updated,
            }).execute();
          }
        });
      }
    });

    const readRelations = new ReadClient<RestaurantCategory[]>("http://localhost:3000/restaurantCategories");
    readRelations.execute().then((relations) => {
      if (relations) {
        const filtered = relations.filter((rel) => rel.categoryId !== category.id);
        new UpdateClient<RestaurantCategory[]>("http://localhost:3000/restaurantCategories", filtered).execute();
      }
    });
  }
});

// Exemple : suppression d'un restaurant
const deleteRestaurantClient = new DeleteClient<Restaurant>("http://localhost:3000/restaurants/3aa8");
deleteRestaurantClient.execute().then((restaurant) => {
  if (restaurant) {
    console.log("DELETE Restaurant :", restaurant);

    const readCategories = new ReadClient<Category[]>("http://localhost:3000/categories");
    readCategories.execute().then((categories) => {
      if (categories) {
        categories.forEach((c) => {
          if (c.restaurantIds?.includes(restaurant.id!)) {
            const updated = c.restaurantIds.filter((id) => id !== restaurant.id);
            new UpdateClient<Category>(\`http://localhost:3000/categories/\${c.id}\`, {
              restaurantIds: updated,
            }).execute();
          }
        });
      }
    });

    const readRelations = new ReadClient<RestaurantCategory[]>("http://localhost:3000/restaurantCategories");
    readRelations.execute().then((relations) => {
      if (relations) {
        const filtered = relations.filter((rel) => rel.restaurantId !== restaurant.id);
        new UpdateClient<RestaurantCategory[]>("http://localhost:3000/restaurantCategories", filtered).execute();
      }
    });
  }
});`}</code></pre>

    <p>
      üîÅ <strong>Remarque</strong> : chaque op√©ration <code>DELETE</code> d√©clenche la mise √† jour des entit√©s li√©es (restaurants ou cat√©gories), puis la mise √† jour des relations dans <code>restaurantCategories</code>.
    </p>
    <p>
      Ce fonctionnement garantit la coh√©rence des relations m√™me apr√®s suppression ou modification de donn√©es.
    </p>
  </article>
)}

{section.id === "17_forms" && (
  <article>
    <p>Je sais pas comment faire</p>
  </article>
)}

{section.id === "18_web_components" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Cr√©ez un nouvel √©l√©ment HTML personnalis√© appel√© <code>&lt;date-time&gt;</code> qui affiche la date et l'heure actuelles.
    </p>
    <p>
      Cr√©ez un autre √©l√©ment HTML personnalis√© appel√© <code>&lt;greet-custom&gt;</code> qui affiche un message de salutation personnalis√© en fonction de l'heure de la journ√©e (par exemple, "Bonjour" le matin, "Bon apr√®s-midi" l'apr√®s-midi, "Bonsoir" le soir).
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <p>
      Comme pour les exercices pr√©c√©dents, commencez par cr√©er un projet Astro. Ensuite, modifiez le fichier <code>src/pages/index.astro</code> pour y inclure les composants personnalis√©s :
    </p>

    <pre><code>{`---
---
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <title>Web Components Demo</title>
    <script type="module" src="/src/scripts/app.ts"></script>
  </head>
  <body>
    <h1>D√©mo des Web Components</h1>

    <p>Voici la date et l'heure actuelle : <date-time></date-time></p>

    <p>Message de salutation personnalis√© : <greet-custom></greet-custom></p>
  </body>
</html>`}</code></pre>

    <p>
      Ensuite, cr√©ez un fichier <code>src/scripts/app.ts</code> avec le code suivant :
    </p>

    <pre><code class="language-ts">{`class DateTimeElement extends HTMLElement {
  connectedCallback() {
    this.updateTime();
    setInterval(() => this.updateTime(), 1000); 
  }

  updateTime() {
    const now = new Date();
    this.textContent = now.toLocaleString(); 
  }
}
customElements.define('date-time', DateTimeElement);

class GreetCustomElement extends HTMLElement {
  connectedCallback() {
    const hour = new Date().getHours();
    let greeting = '';

    if (hour >= 5 && hour < 12) {
      greeting = 'Bonjour';
    } else if (hour >= 12 && hour < 18) {
      greeting = 'Bon apr√®s-midi';
    } else {
      greeting = 'Bonsoir';
    }

    this.textContent = \`\${greeting} !\`;
  }
}
customElements.define('greet-custom', GreetCustomElement);`}</code></pre>

    <p>
      üîé <strong>Explication :</strong>
    </p>
    <ul>
      <li><code>&lt;date-time&gt;</code> est mis √† jour automatiquement toutes les secondes avec l'heure locale gr√¢ce √† <code>setInterval()</code>.</li>
      <li><code>&lt;greet-custom&gt;</code> choisit une salutation en fonction de l'heure du jour via <code>new Date().getHours()</code>.</li>
    </ul>

    <p>
      Ces deux composants utilisent l'API native <code>customElements.define()</code> pour cr√©er des balises HTML personnalis√©es et dynamiques c√¥t√© client.
    </p>
  </article>
)}




    {/* {section.id !== "01_hello_world_ts" && section.id !== "02_hello_astro_typescript" &&  section.id !== "03_modules" && section.id !== "04_client_server" && section.id !== "05_html_css_punto" &&
    section.id !== "06_css_flexbox" && section.id !== "07_fat_arrow" && section.id !== "08_map_reduce" && section.id !== "09_obejcts" && section.id !== "10_json" &&
    section.id !== "11_generics" &&section.id !== "12_exceptions" &&section.id !== "13_async_await" &&section.id !== "14_fetch" &&section.id !== "15_cors" &&
    section.id !== "16_http_crud" &&(
  <p>ËøôÈáåÊòØ {section.title} ÁöÑÂÜÖÂÆπÂ±ïÁ§∫Âå∫„ÄÇ</p>
)} */}
  </section>
))}
    </main>
  </div>
</BaseLayout>



<!-- <BaseLayout title={pageTitle}>
  <h1>Exercices - WebDev101</h1>
  <p>exxxxxxxererrrrrrrrccccccc</p>
</BaseLayout> -->