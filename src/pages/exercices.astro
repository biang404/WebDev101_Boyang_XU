---
import BaseLayout from '../layouts/Layout.astro';
const pageTitle = "Exercices - WebDev101";
import '../styles/exercices.css';


const sections = [
{ id: "01_hello_world_ts", title: "01 hello world typescript" },
  { id: "02_hello_astro_typescript", title: "02 hello astro typescript" },
  { id: "03_modules", title: "03 modules" },
  { id: "04_client_server", title: "04 client or server side" },
  { id: "05_html_css_punto", title: "05 html css punto" },
  { id: "06_css_flexbox", title: "06 CSS flexbox" },
  { id: "07_fat_arrow", title: "07 fat arrow" },
  { id: "08_map_reduce", title: "08 map reduce filter" },
  { id: "09_objects", title: "09 objects" },
  { id: "10_json", title: "10 json" },
  { id: "11_generics", title: "11 generics" },
  { id: "12_exceptions", title: "12 exceptions" },
  { id: "13_async_await", title: "13 async await" },
  { id: "14_fetch", title: "14 fetch" },
  { id: "15_cors", title: "15 cors" },
  { id: "16_http_crud", title: "16 http CRUD" },
  { id: "17_forms", title: "17 forms" },
  { id: "18_web_components", title: "18 web components" },
];
---


<BaseLayout title={pageTitle}>
  <div class="exercise-layout">
    <aside class="sidebar">
      <h2>Exercices</h2>
      <ul>
        {sections.map(section => (
          <li>
            <a href={`#${section.id}`}>{section.title}</a>
          </li>
        ))}
      </ul>
    </aside>

    <main class="content">
      {sections.map(section => (
  <section id={section.id} class="exercise-section">
    <h3>{section.title}</h3>

    {section.id === "01_hello_world_ts" && (
      <article>
        <h4>üìù Question :</h4>
        <p>
          Comparez le fichier <code>hello.js</code> et <code>hello.ts</code> et d√©duisez l'√©tape de transpilation.
          √Ä quoi sert le typage fort dans TypeScript qui n'existe pas dans JavaScript ?
          R√©pondez dans un fichier texte au format markdown.
        </p>

        <h4>‚úÖ R√©ponse :</h4>
        <h5>La comparaison entre le fichier <code>hello.js</code> et <code>hello.ts</code></h5>
        <p>
          En TypeScript, nous devons sp√©cifier le type des variables (par exemple, dans <code>hello.ts</code>, le type de <code>message2</code> est <code>string</code>), alors qu'en JavaScript, ce n'est pas n√©cessaire.
          De plus, pour d√©finir une variable constante, les mots-cl√©s utilis√©s en TypeScript et en JavaScript sont √©galement diff√©rents.
        </p>

        <h5>L'√©tape de transpilation :</h5>
        <p>
          Le fichier <code>hello.ts</code> est √©crit en TypeScript, un langage qui ajoute des fonctionnalit√©s suppl√©mentaires √† JavaScript, notamment le typage statique.
          Lors de la transpilation (conversion du code TypeScript en JavaScript), le compilateur TypeScript (<code>tsc</code>) supprime les annotations de type et g√©n√®re un fichier JavaScript standard.
        </p>
        <p>Exemple :</p>
        <pre><code class="language-ts">const message2: string = "Hello World";</code></pre>
        <p>devient :</p>
        <pre><code class="language-js">var message1 = "Hello World";</code></pre>

        <h5>R√¥le du typage fort dans TypeScript :</h5>
        <ul>
          <li>‚úÖ D√©tection des erreurs de type avant ex√©cution.</li>
          <li>‚úÖ Meilleure lisibilit√© et compr√©hension du code.</li>
          <li>‚úÖ Autocompl√©tion plus pr√©cise dans les IDEs.</li>
          <li>‚úÖ Moins de bugs li√©s aux types, meilleur maintien du code.</li>
          <li>‚úÖ Support des concepts avanc√©s comme les interfaces, g√©n√©riques, SOLID.</li>
        </ul>

        <p><strong>En r√©sum√© :</strong> le typage fort dans TypeScript ajoute une couche de s√©curit√© et de clart√© qui n'existe pas dans JavaScript seul.</p>
      </article>
    )}

    {section.id === "02_hello_astro_typescript" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Cr√©ez une application web servie avec <strong>Astro</strong>, en <strong>TypeScript</strong>, qui affiche <code>"Bonjour, TypeScript!"</code> dans la page web :
    </p>
    <ul>
      <li>Cr√©er programmatiquement (depuis le script TypeScript) un <code>&lt;div&gt;</code> avec un id <code>"app"</code></li>
      <li>Cr√©er un <code>&lt;h1&gt;</code> avec le texte <code>"Bonjour, TypeScript!"</code></li>
      <li>Ajouter le <code>&lt;h1&gt;</code> dans le <code>&lt;div&gt;</code></li>
      <li>Ajouter le <code>&lt;div&gt;</code> dans le <code>&lt;body&gt;</code></li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <p>
      Pour accomplir cette t√¢che, suivez les instructions fournies dans le lien suivant :
      <a href="https://webdev101.gitlab.io/#/02_hello_astro_typescript/" target="_blank">webdev101.gitlab.io</a>,
      puis modifiez le fichier <code>src/pages/index.astro</code> comme suit :
    </p>

    <pre><code class="language-html">
---
---
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Astro + TypeScript&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script src="../scripts/app.ts"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
    </code></pre>

    <p>
      Ensuite, cr√©ez un dossier <code>src/scripts</code> et ajoutez un fichier nomm√© <code>app.ts</code> avec le code TypeScript suivant :
    </p>

    <pre><code class="language-ts">
// cr√©er programmatiquement (depuis le script TypeScript) un div avec un id "app"
const appDiv = document.createElement("div");
appDiv.id = "app";

// cr√©er un h1 avec le texte "Bonjour, TypeScript!"
const heading = document.createElement("h1");
heading.textContent = "Bonjour, TypeScript!";

// ajouter le h1 dans le div
appDiv.appendChild(heading);

// ajouter le div dans le body
document.body.appendChild(appDiv);
    </code></pre>

    <p>
      Ce script ajoutera dynamiquement une structure HTML dans la page une fois qu'elle est charg√©e, permettant √† l'utilisateur de voir le message ¬´ Bonjour, TypeScript! ¬ª g√©n√©r√© par TypeScript.
    </p>
  </article>
)}

    {section.id !== "01_hello_world_ts" && section.id !== "02_hello_astro_typescript" && (
  <p>ËøôÈáåÊòØ {section.title} ÁöÑÂÜÖÂÆπÂ±ïÁ§∫Âå∫„ÄÇ</p>
)}
  </section>
))}
    </main>
  </div>
</BaseLayout>



<!-- <BaseLayout title={pageTitle}>
  <h1>Exercices - WebDev101</h1>
  <p>exxxxxxxererrrrrrrrccccccc</p>
</BaseLayout> -->