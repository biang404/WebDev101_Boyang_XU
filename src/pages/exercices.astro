---
import BaseLayout from '../layouts/Layout.astro';
const pageTitle = "Exercices - WebDev101";
import '../styles/exercices.css';


const sections = [
{ id: "01_hello_world_ts", title: "01 hello world typescript" },
  { id: "02_hello_astro_typescript", title: "02 hello astro typescript" },
  { id: "03_modules", title: "03 modules" },
  { id: "04_client_server", title: "04 client or server side" },
  { id: "05_html_css_punto", title: "05 html css punto" },
  { id: "06_css_flexbox", title: "06 CSS flexbox" },
  { id: "07_fat_arrow", title: "07 fat arrow" },
  { id: "08_map_reduce", title: "08 map reduce filter" },
  { id: "09_objects", title: "09 objects" },
  { id: "10_json", title: "10 json" },
  { id: "11_generics", title: "11 generics" },
  { id: "12_exceptions", title: "12 exceptions" },
  { id: "13_async_await", title: "13 async await" },
  { id: "14_fetch", title: "14 fetch" },
  { id: "15_cors", title: "15 cors" },
  { id: "16_http_crud", title: "16 http CRUD" },
  { id: "17_forms", title: "17 forms" },
  { id: "18_web_components", title: "18 web components" },
];
---


<BaseLayout title={pageTitle}>
  <div class="exercise-layout">
    <aside class="sidebar">
      <h2>Exercices</h2>
      <ul>
        {sections.map(section => (
          <li>
            <a href={`#${section.id}`}>{section.title}</a>
          </li>
        ))}
      </ul>
    </aside>

    <main class="content">
      {sections.map(section => (
  <section id={section.id} class="exercise-section">
    <h3>{section.title}</h3>

    {section.id === "01_hello_world_ts" && (
      <article>
        <h4>üìù Question :</h4>
        <p>
          Comparez le fichier <code>hello.js</code> et <code>hello.ts</code> et d√©duisez l'√©tape de transpilation.
          √Ä quoi sert le typage fort dans TypeScript qui n'existe pas dans JavaScript ?
          R√©pondez dans un fichier texte au format markdown.
        </p>

        <h4>‚úÖ R√©ponse :</h4>
        <h5>La comparaison entre le fichier <code>hello.js</code> et <code>hello.ts</code></h5>
        <p>
          En TypeScript, nous devons sp√©cifier le type des variables (par exemple, dans <code>hello.ts</code>, le type de <code>message2</code> est <code>string</code>), alors qu'en JavaScript, ce n'est pas n√©cessaire.
          De plus, pour d√©finir une variable constante, les mots-cl√©s utilis√©s en TypeScript et en JavaScript sont √©galement diff√©rents.
        </p>

        <h5>L'√©tape de transpilation :</h5>
        <p>
          Le fichier <code>hello.ts</code> est √©crit en TypeScript, un langage qui ajoute des fonctionnalit√©s suppl√©mentaires √† JavaScript, notamment le typage statique.
          Lors de la transpilation (conversion du code TypeScript en JavaScript), le compilateur TypeScript (<code>tsc</code>) supprime les annotations de type et g√©n√®re un fichier JavaScript standard.
        </p>
        <p>Exemple :</p>
        <pre><code class="language-ts">const message2: string = "Hello World";</code></pre>
        <p>devient :</p>
        <pre><code class="language-js">var message1 = "Hello World";</code></pre>

        <h5>R√¥le du typage fort dans TypeScript :</h5>
        <ul>
          <li>‚úÖ D√©tection des erreurs de type avant ex√©cution.</li>
          <li>‚úÖ Meilleure lisibilit√© et compr√©hension du code.</li>
          <li>‚úÖ Autocompl√©tion plus pr√©cise dans les IDEs.</li>
          <li>‚úÖ Moins de bugs li√©s aux types, meilleur maintien du code.</li>
          <li>‚úÖ Support des concepts avanc√©s comme les interfaces, g√©n√©riques, SOLID.</li>
        </ul>

        <p><strong>En r√©sum√© :</strong> le typage fort dans TypeScript ajoute une couche de s√©curit√© et de clart√© qui n'existe pas dans JavaScript seul.</p>
      </article>
    )}

    {section.id === "02_hello_astro_typescript" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Cr√©ez une application web servie avec <strong>Astro</strong>, en <strong>TypeScript</strong>, qui affiche <code>"Bonjour, TypeScript!"</code> dans la page web :
    </p>
    <ul>
      <li>Cr√©er programmatiquement (depuis le script TypeScript) un <code>&lt;div&gt;</code> avec un id <code>"app"</code></li>
      <li>Cr√©er un <code>&lt;h1&gt;</code> avec le texte <code>"Bonjour, TypeScript!"</code></li>
      <li>Ajouter le <code>&lt;h1&gt;</code> dans le <code>&lt;div&gt;</code></li>
      <li>Ajouter le <code>&lt;div&gt;</code> dans le <code>&lt;body&gt;</code></li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <p>
      Pour accomplir cette t√¢che, suivez les instructions fournies dans le lien suivant :
      <a href="https://webdev101.gitlab.io/#/02_hello_astro_typescript/" target="_blank">webdev101.gitlab.io</a>,
      puis modifiez le fichier <code>src/pages/index.astro</code> comme suit :
    </p>

    <pre><code class="language-html">
---
---
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Astro + TypeScript&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script src="../scripts/app.ts"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
    </code></pre>

    <p>
      Ensuite, cr√©ez un dossier <code>src/scripts</code> et ajoutez un fichier nomm√© <code>app.ts</code> avec le code TypeScript suivant :
    </p>

    <pre><code class="language-ts">
// cr√©er programmatiquement (depuis le script TypeScript) un div avec un id "app"
const appDiv = document.createElement("div");
appDiv.id = "app";

// cr√©er un h1 avec le texte "Bonjour, TypeScript!"
const heading = document.createElement("h1");
heading.textContent = "Bonjour, TypeScript!";

// ajouter le h1 dans le div
appDiv.appendChild(heading);

// ajouter le div dans le body
document.body.appendChild(appDiv);
    </code></pre>

    <p>
      Ce script ajoutera dynamiquement une structure HTML dans la page une fois qu'elle est charg√©e, permettant √† l'utilisateur de voir le message ¬´ Bonjour, TypeScript! ¬ª g√©n√©r√© par TypeScript.
    </p>
  </article>
)}

    {section.id === "03_modules" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Cr√©ez une application avec trois fichiers : <code>calculJours.ts</code>, <code>moduleVacances.ts</code> et <code>moduleTravail.ts</code> qui utilisent des modules pour calculer le nombre de jours de vacances restants et le nombre de jours de travail restants pour un employ√©.
    </p>
    <ul>
      <li>
        Dans les deux modules <code>moduleVacances.ts</code> et <code>moduleTravail.ts</code>, cr√©ez la fonction <code>calculerJoursRestants</code> avec le m√™me nom dans les deux modules, qui prend en param√®tre le nombre de jours de vacances ou de travail d√©j√† pris et retourne le nombre de jours restants.
      </li>
      <li>
        Exportez la fonction avec <code>export</code> dans les deux modules.
      </li>
      <li>
        Dans le fichier <code>calculJours.ts</code>, importez les deux modules et utilisez la fonction <code>calculerJoursRestants</code> pour afficher le nombre de jours de vacances et de travail restants pour un employ√©. R√©solvez le conflit de nom entre les deux modules.
      </li>
      <li>
        Affichez les r√©sultats dans des balises <code>div</code> avec <code>createElement</code> et <code>appendChild</code>.
      </li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <p>
      Commencez par cr√©er un projet Astro comme expliqu√© dans les exercices pr√©c√©dents.
    </p>
    <p>
      Ensuite, remplacez le contenu du fichier <code>src/pages/index.astro</code> par :
    </p>

    <pre><code class="language-html">
---
---

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;WebDev101 Telecom Paris&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script src="../scripts/calculJours.ts"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
    </code></pre>

    <p>
      Ensuite, dans le dossier <code>src</code>, cr√©ez un sous-dossier <code>scripts</code>, puis ajoutez-y les trois fichiers suivants avec le contenu correspondant :
    </p>

    <p><strong>moduleVacances.ts</strong></p>
    <pre><code class="language-ts" is:raw>
export function calculerJoursRestants(joursPris: number): number {
  return 30 - joursPris;
}
    </code></pre>

    <p><strong>moduleTravail.ts</strong></p>
    <pre><code class="language-ts" is:raw>
export function calculerJoursRestants(joursPris: number): number {
  return 218 - joursPris;
}
    </code></pre>

    <p><strong>calculJours.ts</strong></p>
<pre><code class="language-ts">
import * as Vacances from "./moduleVacances.ts";
import * as Travail from "./moduleTravail.ts";

const joursVacancesRestants = Vacances.calculerJoursRestants(10);
const joursTravailRestants = Travail.calculerJoursRestants(30);

const div = document.createElement("div");
div.id = "resultats";

const vacancesEl = document.createElement("p");
vacancesEl.textContent = "Jours de vacances restants : " + joursVacancesRestants;

const travailEl = document.createElement("p");
travailEl.textContent = "Jours de travail restants : " + joursTravailRestants;

div.appendChild(vacancesEl);
div.appendChild(travailEl);
document.body.appendChild(div);
</code></pre>


    <p>
      Cette solution montre comment utiliser deux modules diff√©rents ayant une fonction portant le m√™me nom, et g√©rer le conflit gr√¢ce √† des alias d'importation (ici avec <code>* as</code>).
    </p>
  </article>
)}

{section.id === "04_client_server" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Regardez bien tous les fichiers source fournis dans le projet Astro.
      <code>index.astro</code> et <code>moduleWeatherServerSide.ts</code> sont dans le dossier <code>src/pages</code> et
      <code>app.ts</code> ainsi que <code>moduleWeatherClientSide.ts</code> sont dans le dossier <code>src/scripts</code>.
    </p>
    <p>
      Ajoutez des <code>console.log("message")</code> juste avant les <code>return</code> (en changeant "message" par ce que vous voulez)
      dans les fonctions <code>getCurrentHumidity</code>, <code>getCurrentWind</code>, <code>getCurrentTemperature</code> et <code>getCurrentCloudCover</code>.
    </p>
    <p>
      O√π s'affichent les 4 messages ? Dans le terminal du serveur Astro ou dans la console du navigateur ? Pourquoi ?
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <h5># Diff√©rence d'affichage des messages entre le serveur et le client</h5>

    <h6>## Observation</h6>
    <ul>
      <li>üñ•Ô∏è Les messages de <strong>Temperature</strong> et <strong>Cloud Cover</strong> se trouvent dans le <em>terminal du serveur Astro</em>.</li>
      <li>üåê Les messages de <strong>Humidity</strong> et <strong>Wind Speed</strong> se trouvent dans la <em>console du navigateur</em>.</li>
    </ul>

    <h6>## Explication</h6>

    <h6>### C√¥t√© serveur :</h6>
    <p>
      Les fonctions <code>getCurrentTemperature</code> et <code>getCurrentCloudCover</code> sont ex√©cut√©es lors du rendu c√¥t√© serveur, c‚Äôest-√†-dire avant que la page ne soit envoy√©e au navigateur.
    </p>
    <p>
      Astro ex√©cute ces fonctions sur le serveur (dans Node.js ou un environnement similaire) pour g√©n√©rer le HTML avec les donn√©es d√©j√† int√©gr√©es.
      Ainsi, les <code>console.log</code> situ√©s dans ces fonctions s‚Äôaffichent dans le terminal du serveur, et non dans le navigateur.
    </p>

    <h6>### C√¥t√© client :</h6>
    <p>
      Les fonctions <code>getCurrentHumidity</code> et <code>getCurrentWind</code> sont appel√©es dans du code ex√©cut√© <strong>apr√®s le chargement de la page</strong>, directement dans le navigateur via un script c√¥t√© client.
    </p>
    <p>
      Par cons√©quent, leurs <code>console.log</code> apparaissent dans la console des outils de d√©veloppement du navigateur, et non sur le serveur.
    </p>

    <p><strong>Conclusion :</strong> Cela illustre la diff√©rence entre le code ex√©cut√© <em>√† la construction de la page</em> (serveur) et le code ex√©cut√© <em>apr√®s le chargement de la page</em> (client).</p>
  </article>
)}

{section.id === "05_html_css_punto" && (
  <article>
    <p>Ceci est mon mini-projet. Veuillez cliquer sur le lien <strong>Punto</strong> dans la barre de navigation pour voir le r√©sultat.</p>
  </article>
)}

{section.id === "06_css_flexbox" && (
  <article>
    <h4>üìù Question :</h4>
    <p>
      Faites les 4 exercices suivants. Pour le rendu du TP, cr√©ez un fichier HTML et un fichier CSS pour chaque exercice, et mettez les 4 exercices dans un dossier <code>06_CSS_flexbox</code> dans votre d√©p√¥t git. N'oubliez pas de lier vos fichiers HTML et CSS.
    </p>
    <ul>
      <li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout/Flexbox_skills#disposition_flexible_1" target="_blank">Disposition flexible 1</a></li>
      <li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout/Flexbox_skills#disposition_flexible_2" target="_blank">Disposition flexible 2</a></li>
      <li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout/Flexbox_skills#disposition_flexible_3" target="_blank">Disposition flexible 3</a></li>
      <li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout/Flexbox_skills#disposition_flexible_4" target="_blank">Disposition flexible 4</a></li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>

    <h5>üéØ Exercice 1 : Navigation horizontale</h5>
    <p>
      üëâ Le code HTML peut √™tre consult√© ici :  
      <a href="https://github.com/mdn/css-examples/blob/main/learn/tasks/flexbox/flexbox1-download.html" target="_blank">flexbox1-download.html</a>
    </p>
    <p><strong>task1.css</strong></p>
    <pre><code class="language-css" is:raw>{`nav ul {
  display: flex;
  justify-content: space-between;
  width: 100%;
  padding: 0;
}`}</code></pre>

    <h5>üéØ Exercice 2 : R√©partition horizontale de 3 blocs</h5>
    <p>
      üëâ Le code HTML peut √™tre consult√© ici :  
      <a href="https://github.com/mdn/css-examples/blob/main/learn/tasks/flexbox/flexbox2-download.html" target="_blank">flexbox2-download.html</a>
    </p>
    <p><strong>task2.css</strong></p>
    <pre><code class="language-css" is:raw>{`ul {
  display: flex;
  flex-direction: row;
  height: 100vh;
  padding: 0;
  margin: 0;
}

li {
  flex: 1;
  display: flex;
  justify-content: flex-start;
  margin: 0.5em 0;
}`}</code></pre>

    <h5>üéØ Exercice 3 : Centrage vertical et horizontal</h5>
    <p>
      üëâ Le code HTML peut √™tre consult√© ici :  
      <a href="https://github.com/mdn/css-examples/blob/main/learn/tasks/flexbox/flexbox3-download.html" target="_blank">flexbox3-download.html</a>
    </p>
    <p><strong>task3.css</strong></p>
    <pre><code class="language-css" is:raw>{`.parent {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: auto;
}

.child {
  width: 100px;
  height: 100px;
  background-color: lightblue;
}`}</code></pre>

    <h5>üéØ Exercice 4 : Grille responsive en 3 lignes</h5>
    <p>
      üëâ Le code HTML peut √™tre consult√© ici :  
      <a href="https://github.com/mdn/css-examples/blob/main/learn/tasks/flexbox/flexbox4-download.html" target="_blank">flexbox4-download.html</a>
    </p>
    <p><strong>task4.css</strong></p>
    <pre><code class="language-css" is:raw>{`ul {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-content: space-between;
  height: 100vh;
  list-style: none;
  padding: 0;
  margin: 0;
}

li {
  background-color: #4d7298;
  border: 2px solid #77a6b6;
  border-radius: 0.5em;
  color: #fff;
  padding: 0.5em;
  margin: 0.5em;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

li:nth-child(-n+4) {
  flex: 1 1 calc(25% - 1em);
  height: calc(33.33% - 1em);
}

li:nth-child(n+5):nth-child(-n+7),
li:nth-child(n+8) {
  flex: 1 1 calc(33.33% - 1em);
  height: calc(33.33% - 1em);
}`}</code></pre>

    <p>üìÅ Tous les fichiers CSS ci-dessus sont plac√©s dans le dossier <code>06_CSS_flexbox</code> conform√©ment √† l'instruction du TP.</p>
  </article>
)}


{section.id === "07_fat_arrow" && (
  <article>
    <h4>üìù Exercice 1 :</h4>
    <p>
      Faites un projet Astro et faites en sorte que le fichier <code>app.ts</code> soit ex√©cut√© dans le navigateur (c√¥t√© client). Cela permet d'acc√©der √† l'objet <code>document</code> qui repr√©sente la page web affich√©e dans le navigateur.
    </p>
    <p>
      Ajoutez un <code>addEventListener</code> sur le <code>document</code> pour afficher les coordonn√©es du clic de la souris.
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <p>
      Veuillez d'abord cr√©er un projet Astro comme dans les exercices pr√©c√©dents, puis remplacez le fichier <code>src/pages/index.astro</code> avec le code minimal qui appelle un fichier <code>app.ts</code> situ√© dans le dossier <code>src/scripts</code>.
    </p>
    <p>Le contenu du fichier <code>app.ts</code> est le suivant :</p>
    <pre><code class="language-ts" is:raw>{`document.addEventListener("click", (event: MouseEvent) => {
  console.log(\`x: \${event.clientX}, y: \${event.clientY}\`);
});`}</code></pre>

    <hr />

    <h4>üìù Exercice 2 :</h4>
    <p>
      Faites une application de calculatrice :
    </p>
    <ul>
      <li>Cr√©ez une fonction fl√©ch√©e <code>additionner</code> qui prend deux nombres et retourne leur somme.</li>
      <li>Cr√©ez une fonction fl√©ch√©e <code>soustraire</code> qui retourne la diff√©rence.</li>
      <li>Cr√©ez une fonction fl√©ch√©e <code>multiplier</code> qui retourne le produit.</li>
      <li>Cr√©ez une fonction fl√©ch√©e <code>diviser</code> qui retourne le quotient.</li>
      <li>
        Cr√©ez une fonction fl√©ch√©e <code>calculatrice</code> qui prend deux nombres et une cha√Æne repr√©sentant l‚Äôop√©ration, puis affiche le r√©sultat de l‚Äôop√©ration.
      </li>
    </ul>

    <h4>‚úÖ R√©ponse :</h4>
    <p>Voici le contenu du fichier <code>app.ts</code> correspondant √† cette calculatrice :</p>
    <pre><code class="language-ts" is:raw>{`const additionner = (a: number, b: number): number => a + b;
const soustraire = (a: number, b: number): number => a - b;
const multiplier = (a: number, b: number): number => a * b;
const diviser = (a: number, b: number): number => a / b;

const calculatrice = (a: number, b: number, operation: string): void => {
  let resultat: number;

  switch (operation) {
    case "additionner":
      resultat = additionner(a, b);
      break;
    case "soustraire":
      resultat = soustraire(a, b);
      break;
    case "multiplier":
      resultat = multiplier(a, b);
      break;
    case "diviser":
      resultat = diviser(a, b);
      break;
    default:
      console.log("Op√©ration non reconnue.");
      return;
  }

  console.log(\`\${operation}(\${a}, \${b}) = \${resultat}\`);
};

// Exemple d'appel :
calculatrice(10, 5, "additionner");
calculatrice(10, 5, "soustraire");
calculatrice(10, 5, "multiplier");
calculatrice(10, 5, "diviser");`}</code></pre>

    <hr />

    <h4>üìù Exercice 3 :</h4>
    <p>
      Faites une application qui affiche les coordonn√©es de la souris toutes les secondes.
      Vous pouvez vous aider de la documentation de l'objet <code>MouseEvent</code> :
      <a href="https://developer.mozilla.org/fr/docs/Web/API/MouseEvent" target="_blank">MDN MouseEvent</a>
    </p>

    <h4>‚úÖ R√©ponse :</h4>
    <p>Voici le contenu du fichier <code>app.ts</code> :</p>
    <pre><code class="language-ts" is:raw>{`let mouseX: number = 0;
let mouseY: number = 0;

document.addEventListener("mousemove", (event: MouseEvent) => {
  mouseX = event.clientX;
  mouseY = event.clientY;
});

setInterval(() => {
  console.log(\`x: \${mouseX}, y: \${mouseY}\`);
}, 1000);`}</code></pre>
  </article>
)}


    {section.id !== "01_hello_world_ts" && section.id !== "02_hello_astro_typescript" &&  section.id !== "03_modules" && section.id !== "04_client_server" && section.id !== "05_html_css_punto" &&
    section.id !== "06_css_flexbox" && section.id !== "07_fat_arrow" &&(
  <p>ËøôÈáåÊòØ {section.title} ÁöÑÂÜÖÂÆπÂ±ïÁ§∫Âå∫„ÄÇ</p>
)}
  </section>
))}
    </main>
  </div>
</BaseLayout>



<!-- <BaseLayout title={pageTitle}>
  <h1>Exercices - WebDev101</h1>
  <p>exxxxxxxererrrrrrrrccccccc</p>
</BaseLayout> -->